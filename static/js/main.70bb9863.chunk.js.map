{"version":3,"sources":["serviceWorker.js","components/counter.jsx","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","Counter","props","handleChange","e","setState","target","name","value","bind","handleFormSubmit","state","title","description","price","dataTosend","registerClicked","localStorage","setItem","JSON","stringify","this","preventDefault","datatosend","push","documentData","parse","getItem","className","style","width","border","height","marginTop","onSubmit","paddingLeft","paddingRight","type","onChange","map","data","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"yPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oDC8HSC,E,kDA5Ib,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAeRC,aAAe,SAAAC,GACb,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAf1C,EAAKL,aAAe,EAAKA,aAAaM,KAAlB,gBACpB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,MAAQ,CACXC,MAAO,GACPC,YAAa,GACbC,MAAO,GACPC,WAAY,GACZC,iBAAiB,GATF,E,gEAajBC,aAAaC,QAAQ,QAASC,KAAKC,UAAUC,KAAKV,MAAMI,e,uCAOzCX,GACfA,EAAEkB,iBACF,IAAId,EAAQ,CACVI,MAAOS,KAAKV,MAAMC,MAClBC,YAAaQ,KAAKV,MAAME,YACxBC,MAAOO,KAAKV,MAAMG,OAGhBS,EAAaF,KAAKV,MAAMI,WAC5BQ,EAAWC,KAAKhB,GAChBa,KAAKhB,SAAS,CACZU,WAAYQ,EACZP,iBAAiB,IAEnBC,aAAaC,QAAQ,QAASC,KAAKC,UAAUC,KAAKV,MAAMI,aACxDM,KAAKhB,SAAS,CAAEW,iBAAiB,M,+BAUjC,OANGK,KAAKV,MAAMK,kBACZK,KAAKI,aAAeN,KAAKO,MAAMT,aAAaU,QAAQ,UACpDN,KAAKhB,SAAS,CACZW,iBAAiB,KAInB,yBAAKY,UAAU,0FACb,yBACEC,MAAO,CACLC,MAAO,GACPC,OAAQ,gBACRC,OAAQ,cACRC,UAAW,UAGZ,IACD,wBAAIL,UAAU,kDAAd,QAGA,0BACEM,SAAUb,KAAKX,iBACfkB,UAAU,oEAEV,yBACEA,UAAU,aACVC,MAAO,CACLC,MAAO,OACPK,YAAa,OACbC,aAAc,SAGhB,wCACA,2BACEC,KAAK,OACL9B,KAAK,QACLqB,UAAU,eACVU,SAAUjB,KAAKlB,gBAGnB,yBACEyB,UAAU,aACVC,MAAO,CACLC,MAAO,OACPK,YAAa,OACbC,aAAc,SAGhB,8CACA,2BACEC,KAAK,OACL9B,KAAK,cACLqB,UAAU,eACVU,SAAUjB,KAAKlB,gBAGnB,yBACEyB,UAAU,aACVC,MAAO,CACLC,MAAO,OACPK,YAAa,OACbC,aAAc,SAGhB,wCACA,2BACEC,KAAK,SACL9B,KAAK,QACLqB,UAAU,eACVU,SAAUjB,KAAKlB,gBAGnB,4BACEkC,KAAK,SACLT,UAAU,4BACVC,MAAO,CAAEC,MAAO,QAASG,UAAW,SAHtC,YAUJ,yBACEJ,MAAO,CAAEI,UAAW,QACpBL,UAAU,gEAGTP,KAAKI,cAAgBJ,KAAKI,aAAac,KAAI,SAAAC,GAAI,OAC9C,yBAAKZ,UAAU,WACb,6BAAMY,EAAK5B,MAAX,MACA,6BAAM4B,EAAK3B,YAAX,MACA,6BAAM2B,EAAK1B,MAAX,e,GApIQ2B,aCKtBC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SFwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBGzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.70bb9863.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n    documentData;\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n    this.state = {\r\n      title: \"\",\r\n      description: \"\",\r\n      price: \"\",\r\n      dataTosend: [],\r\n      registerClicked: true\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    localStorage.setItem('lists', JSON.stringify(this.state.dataTosend))\r\n   }\r\n\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  handleFormSubmit(e) {\r\n    e.preventDefault();\r\n    let value = {\r\n      title: this.state.title,\r\n      description: this.state.description,\r\n      price: this.state.price\r\n    };\r\n    // this.state.array.push(value);\r\n    let datatosend = this.state.dataTosend;\r\n    datatosend.push(value);\r\n    this.setState({\r\n      dataTosend: datatosend,\r\n      registerClicked: true\r\n    });\r\n    localStorage.setItem(\"lists\", JSON.stringify(this.state.dataTosend));\r\n    this.setState({ registerClicked: true });\r\n  }\r\n\r\n  render() {\r\n    if(this.state.registerClicked){\r\n      this.documentData = JSON.parse(localStorage.getItem('lists'))\r\n      this.setState({\r\n        registerClicked: false\r\n      })\r\n    }\r\n    return (\r\n      <div className=\"container  col-10 col-md-5 align-items-center flex-column h-100 justify-content-center\">\r\n        <div\r\n          style={{\r\n            width: \"\",\r\n            border: \"1px solid red\",\r\n            height: \"fit-content\",\r\n            marginTop: \"120px\"\r\n          }}\r\n        >\r\n          {\" \"}\r\n          <h2 className=\"font-weight-bold text-center mt-4 text-primary\">\r\n            Form\r\n          </h2>\r\n          <form\r\n            onSubmit={this.handleFormSubmit}\r\n            className=\"d-flex flex-column justify-content-center align-items-center p-3\"\r\n          >\r\n            <div\r\n              className=\"form-group\"\r\n              style={{\r\n                width: \"100%\",\r\n                paddingLeft: \"40px\",\r\n                paddingRight: \"40px\"\r\n              }}\r\n            >\r\n              <label>Title</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                className=\"form-control\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n            <div\r\n              className=\"form-group\"\r\n              style={{\r\n                width: \"100%\",\r\n                paddingLeft: \"40px\",\r\n                paddingRight: \"40px\"\r\n              }}\r\n            >\r\n              <label>Description</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"description\"\r\n                className=\"form-control\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n            <div\r\n              className=\"form-group\"\r\n              style={{\r\n                width: \"100%\",\r\n                paddingLeft: \"40px\",\r\n                paddingRight: \"40px\"\r\n              }}\r\n            >\r\n              <label>Price</label>\r\n              <input\r\n                type=\"number\"\r\n                name=\"price\"\r\n                className=\"form-control\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary btn-block\"\r\n              style={{ width: \"250px\", marginTop: \"15px\" }}\r\n            >\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n\r\n        <div\r\n          style={{ marginTop: \"60px\" }}\r\n          className=\"d-flex justify-content-center flex-column align-items-center\"\r\n        >\r\n          \r\n          {this.documentData && this.documentData.map(data => (\r\n            <div className=\"d-flex \">\r\n              <div>{data.title}, </div>\r\n              <div>{data.description}, </div>\r\n              <div>{data.price} </div>\r\n            </div>\r\n          ))}\r\n         \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Counter;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Counter from './components/counter';\nReactDOM.render(\n  \n    <Counter />\n ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}